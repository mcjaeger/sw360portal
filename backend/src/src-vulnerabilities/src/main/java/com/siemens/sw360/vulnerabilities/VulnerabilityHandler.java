/*
 * Copyright Siemens AG, 2016. Part of the SW360 Portal Project.
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License Version 2.0 as published by the
 * Free Software Foundation with classpath exception.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License version 2.0 for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program (please see the COPYING file); if not, write to the Free
 * Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 * 02110-1301, USA.
 */
package com.siemens.sw360.vulnerabilities;

import com.siemens.sw360.datahandler.common.DatabaseSettings;
import com.siemens.sw360.datahandler.db.ComponentDatabaseHandler;
import com.siemens.sw360.datahandler.permissions.PermissionUtils;
import com.siemens.sw360.datahandler.thrift.SW360Exception;
import com.siemens.sw360.datahandler.thrift.components.Component;
import com.siemens.sw360.datahandler.thrift.components.Release;
import com.siemens.sw360.datahandler.thrift.users.User;
import com.siemens.sw360.datahandler.thrift.users.UserGroup;
import com.siemens.sw360.datahandler.thrift.vulnerabilities.ReleaseVulnerabilityRelation;
import com.siemens.sw360.datahandler.thrift.vulnerabilities.Vulnerability;
import com.siemens.sw360.datahandler.thrift.vulnerabilities.VulnerabilityDTO;
import com.siemens.sw360.datahandler.thrift.vulnerabilities.VulnerabilityService;
import com.siemens.sw360.vulnerabilities.common.VulnerabilityMapper;
import com.siemens.sw360.vulnerabilities.db.VulnerabilityDatabaseHandler;
import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.apache.thrift.TException;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

import static org.apache.log4j.Logger.getLogger;

/**
 * Implementation of the Thrift service
 *
 * @author stefan.jaeger@evosoft.com
 */
public class VulnerabilityHandler implements VulnerabilityService.Iface {

    private final static Logger log = getLogger(VulnerabilityHandler.class);


    private final VulnerabilityDatabaseHandler dbHandler;
    private final ComponentDatabaseHandler compHandler;

    public VulnerabilityHandler() throws IOException, SW360Exception {
        dbHandler = new VulnerabilityDatabaseHandler(DatabaseSettings.COUCH_DB_URL, DatabaseSettings.COUCH_DB_VM);
        compHandler = new ComponentDatabaseHandler(DatabaseSettings.COUCH_DB_URL, DatabaseSettings.COUCH_DB_DATABASE, DatabaseSettings.COUCH_DB_ATTACHMENTS);
    }

    @Override
    public List<VulnerabilityDTO> getVulnerabilitiesByReleaseId(String releaseId, User user) throws TException {
        if (!PermissionUtils.isUserAtLeast(UserGroup.USER, user)){
            return Collections.emptyList();
        }

        return getVulsByReleaseId(releaseId, user);
    }

    @Override
    public List<VulnerabilityDTO> getVulnerabilitiesByComponentId(String componentId, User user) throws TException {
        if (!PermissionUtils.isUserAtLeast(UserGroup.USER, user)){
            return Collections.emptyList();
        }
        List<Release> releases = compHandler.getReleasesFromComponentId(componentId, user);
        if (releases == null || releases.size() == 0){
            return Collections.emptyList();
        }

        List<VulnerabilityDTO> dtos = new ArrayList<>();
        releases.stream()
                .map(rel -> getVulsByReleaseId(rel.getId(), user))
                .forEach(list -> dtos.addAll(list));

        return dtos;
    }

    private List<VulnerabilityDTO> getVulsByReleaseId(String releaseId, User user){
        List<ReleaseVulnerabilityRelation> relations = dbHandler.getRelationsByReleaseIds(Arrays.asList(releaseId));
        if (relations == null || relations.size() ==0){
            return Collections.emptyList();
        }
        return relations
                .stream()
                .map(rel -> rel.getVulnerabilityId())
                .map(id -> dbHandler.getById(Vulnerability.class, id))
                .map(VulnerabilityMapper::createVulnerabilityDTO)
                .map(dto -> enrichVulnerabilityDTO(dto, releaseId, user))
                .collect(Collectors.toList());
    }

    private VulnerabilityDTO enrichVulnerabilityDTO(VulnerabilityDTO dto, String releaseId, User user){
        if (dto == null){
            return null;
        }
        dto.setIntReleaseId(releaseId);
        try {
            Release release = compHandler.getRelease(releaseId, user);
            if (release != null){
                dto.setIntComponentId(release.getComponentId());

                String releaseName = "";
                if (!StringUtils.isEmpty(release.getName())){
                    releaseName = release.getName()+" ";
                    dto.setIntComponentName(release.getName());
                } else {
                    Component component = compHandler.getComponent(release.getComponentId(), user);
                    if (component != null){
                        releaseName = component.getName() +" ";
                        dto.setIntComponentName(component.getName());
                    }
                }
                dto.setIntReleaseName(releaseName + release.getVersion());
            }
        } catch (SW360Exception e) {
            log.error(e);
        }
        return dto;
    }
}
