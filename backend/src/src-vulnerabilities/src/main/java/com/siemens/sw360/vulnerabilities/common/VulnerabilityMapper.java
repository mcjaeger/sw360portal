/*
 * Copyright Siemens AG, 2016. Part of the SW360 Portal Project.
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License Version 2.0 as published by the
 * Free Software Foundation with classpath exception.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License version 2.0 for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program (please see the COPYING file); if not, write to the Free
 * Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 * 02110-1301, USA.
 */
package com.siemens.sw360.vulnerabilities.common;

import com.siemens.sw360.datahandler.common.SW360Utils;
import com.siemens.sw360.datahandler.thrift.vulnerabilities.Vulnerability;
import com.siemens.sw360.datahandler.thrift.vulnerabilities.VulnerabilityDTO;
import org.apache.log4j.Logger;

import static org.apache.log4j.Logger.getLogger;

/**
 * maps the updates of a new element to an existing one
 *
 * @author stefan.jaeger@evosoft.com
 */
public class VulnerabilityMapper {

    private final static Logger log = getLogger(VulnerabilityMapper.class);

    private VulnerabilityMapper() {
    }

    public static Vulnerability setLastUpdate(Vulnerability vulnerability){
        if (vulnerability != null){
            return vulnerability.setLastUpdateDate(SW360Utils.getCreatedOnTime());
        }
        return vulnerability;
    }

    public static Vulnerability updateVulnerability(Vulnerability oldElement, Vulnerability update){
        if (oldElement != null && update != null){
            return oldElement
                    .setTitle(update.getTitle())
                    .setDescription(update.getDescription())
                    .setPublishDate(update.getPublishDate())
                    .setLastUpdateDate(update.getLastUpdateDate())
                    .setPriority(update.getPriority())
                    .setPriorityText(update.getPriorityText())
                    .setAction(update.getAction())
                    .setImpact(update.getImpact())
                    .setAssignedExtComponentIds(update.getAssignedExtComponentIds())
                    .setVendorAdvisories(update.getVendorAdvisories())
                    .setLegalNotice(update.getLegalNotice())
                    .setExtendedDescription(update.getExtendedDescription())
                    .setCveReferences(update.getCveReferences())
                    .setReferences(update.getReferences());
        }
        return oldElement;
    }

    public static VulnerabilityDTO createVulnerabilityDTO(Vulnerability element){
        if (element != null){
            return new VulnerabilityDTO(element.getExternalId())
                    .setId(element.getId())
                    .setTitle(element.getTitle())
                    .setDescription(element.getDescription())
                    .setPublishDate(element.getPublishDate())
                    .setPriority(element.getPriority())
                    .setPriorityToolTip(element.getPriorityText())
                    .setAction(element.getAction())
                    .setImpact(element.getImpact())
                    .setLegalNotice(element.getLegalNotice())
                    .setCveReferences(element.getCveReferences())
                    .setReferences(element.getReferences());
        }
        return null;

    }


}
