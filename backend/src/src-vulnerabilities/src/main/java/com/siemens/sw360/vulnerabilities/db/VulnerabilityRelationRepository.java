/*
 * Copyright Siemens AG, 2016. Part of the SW360 Portal Project.
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License Version 2.0 as published by the
 * Free Software Foundation with classpath exception.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License version 2.0 for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program (please see the COPYING file); if not, write to the Free
 * Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 * 02110-1301, USA.
 */
package com.siemens.sw360.vulnerabilities.db;

import com.siemens.sw360.datahandler.common.CommonUtils;
import com.siemens.sw360.datahandler.couchdb.DatabaseConnector;
import com.siemens.sw360.datahandler.couchdb.DatabaseRepository;
import com.siemens.sw360.datahandler.thrift.vulnerabilities.ReleaseVulnerabilityRelation;
import org.ektorp.support.View;

import java.util.Collection;
import java.util.List;
import java.util.Set;

/**
 * CRUD access for the ReleaseVulnerabilityRelation class
 *
 * @author stefan.jaeger@evosoft.com
 */
@View(name = "all", map = "function(doc) { if (doc.type == 'releasevulnerabilityrelation') emit(null, doc._id) }")
public class VulnerabilityRelationRepository extends DatabaseRepository<ReleaseVulnerabilityRelation> {

    private static final String BY_IDs_VIEW =
            "function(doc) {" +
                    "  if (doc.type == 'releasevulnerabilityrelation') {" +
                    "    emit([doc.releaseId, doc.vulnerabilityId], doc);" +
                    "  } " +
                    "}";

    private static final String BY_RELEASE_ID_VIEW =
            "function(doc) {" +
                    "  if (doc.type == 'releasevulnerabilityrelation') {" +
                    "    emit(doc.releaseId, doc);" +
                    "  } " +
                    "}";

    private static final String BY_VULNERABILITY_ID_VIEW =
            "function(doc) {" +
                    "  if (doc.type == 'releasevulnerabilityrelation') {" +
                    "    emit(doc.vulnerabilityId, doc);" +
                    "  } " +
                    "}";

    public VulnerabilityRelationRepository(DatabaseConnector db) {
        super(ReleaseVulnerabilityRelation.class, db);

        initStandardDesignDocument();
    }

    @View(name = "byids", map = BY_IDs_VIEW)
    public ReleaseVulnerabilityRelation getReletionByIds(String releaseId, String vulnerabilityId) {
        final Set<String> idList = queryForIdsAsComplexValue("byids", releaseId, vulnerabilityId);
        if (idList != null && idList.size() > 0)
            return get(CommonUtils.getFirst(idList));
        return null;
    }

    @View(name = "byReleaseId", map = BY_RELEASE_ID_VIEW)
    public List<ReleaseVulnerabilityRelation> getRelationsByReleaseIds(Collection<String> releaseIds) {
        return queryByIds("byReleaseId", releaseIds);
    }

    @View(name = "byVulnerabilityId", map = BY_VULNERABILITY_ID_VIEW)
    public List<ReleaseVulnerabilityRelation> getRelationsByVulnerabilityIds(Collection<String> vulnerabilityIds) {
        return queryByIds("byVulnerabilityId", vulnerabilityIds);
    }


}
